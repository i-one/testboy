= Getting Started with Testboy =


== Getting the Testboy =

The latest Testboy source is available at: [https://testboy.googlecode.com/svn/trunk/src/ https://testboy.googlecode.com/svn/trunk/src/].

You also may check out the project from SVN with the following command:
{{{
http://testboy.googlecode.com/svn/trunk/ testboy-read-only
}}}

== Creating a Run Page ==

After you got the testboy.js file you can create a simple HTML page and connect the Tesboy:

<code language="html">

<!DOCTYPE html>\n
<html>\n
    <head>\n
        <title>Hello World</title>\n
        <script type="text/javascript" src="DIRECTORY_THAT_CONTAINS_TESTBOY_FILE/testboy.js">
    </head>
    <body>
        <h1>Hello Testboy!</h1>
    </body>
</html>

</code>

By opening this page in a browser you will run the connected tests.


== Writing tests ==

Your test JavaScript code should be placed within the BODY element - this will guarantie that the
BODY element is available to render the Testboy console log. It's a good practice to place test
cases in external JS files and include them in the page before the closing BODY tag. 

Here's the JavaScript file sayhi.js that contains sayHi() function, which needs a test.

<code language="javascript">

function sayHi(who) {
    if (who) {
        return "Hi, " + who + "!";
    }
    return "Hi, World!";
};

</code>

Create your test case and place it in a JS file named sayhi_test.js. 

<code language="javascript">

testboy.globalize(testboy.asserts);

var helloWorld = new testboy.TestCase("hello world");

helloWorld.test("sayHi", function () {
    assertEquals("Hi, World!", sayHi(), "Say Hi to World, by default");
    assertEquals("Hi, Tom!", sayHi("Tom"), "Say Hi to Tom");
});

testboy.runner.add(helloWorld);

</code>





<code language="html">

<!DOCTYPE html>
<html>
    <head>
        <title>Hello World</title>
        <script type="text/javascript" src="DIRECTORY_THAT_CONTAINS_TESTBOY_FILE/testboy.js">
    </head>
    <body>
        <h1>Hello Testboy!</h1>
    </body>
</html>

</code>